general:
  use_uvloop: true

functions:
  task_register:
    _type: mcp_tool_wrapper
    url: ${MCP_SERVER_ENDPOINT:-"http://localhost:8080/mcp/sse"}
    mcp_tool_name: task_register
  quick_preview:
    _type: quick_preview
    llm_name: llm_generic
    description: "Provide a quick preview based on the user_prompt, return details if succeeded."
  yh_query_save:
    _type: mcp_tool_wrapper
    url: ${MCP_SERVER_ENDPOINT:-"http://localhost:8080/mcp/sse"}
    mcp_tool_name: yh_query_save
  code_generator:
    _type: code_generator
    llm_name: llm_coder
    description: "Generate code based on the user prompt."
  code_executor:
    _type: mcp_tool_wrapper
    url: ${MCP_SERVER_ENDPOINT:-"http://localhost:8080/mcp/sse"}
    mcp_tool_name: code_executor

llms:
  llm_generic:
    _type: openai
    model_name: ${LLM_GENERIC_MODEL_NAME:-"qwen-plus"}
    api_key: ${LLM_GENERIC_MODEL_API_KEY}
    base_url: ${LLM_GENERIC_MODEL_API_ENDPOINT:-"https://dashscope.aliyuncs.com/compatible-mode/v1"}
    temperature: 1
    max_tokens: 3000
  llm_coder:
    _type: openai
    model_name: ${LLM_CODER_MODEL_NAME:-"qwen3-coder-plus"}
    api_key: ${LLM_CODER_MODEL_API_KEY}
    base_url: ${LLM_CODER_MODEL_API_ENDPOINT:-"https://dashscope.aliyuncs.com/compatible-mode/v1"}
    temperature: 1
    max_tokens: 10000

workflow:
  _type: react_agent
  llm_name: llm_generic
  verbose: true
  parse_agent_response_max_retries: 3
  recursion_limit: 1
  tool_names:
    - task_register
    - quick_preview
    - yh_query_save
    - code_generator
    - code_executor
  system_prompt: |
    Answer the following questions as best you can. You may ask the human to use the following tools:

    {tools}

    **The Workflow Sequence:**
    1. You MUST include ALL required parameters when calling tools, all input for tools must be valid JSON.
    2. You MUST call task_register tool FIRST, before calling any other tools
    2.1 When calling task_register, you MUST use the exact format as below, don't include any other content,
        and make sure the input is a valid JSON object.
        {{
            "user_prompt": "string"
        }}
    2.2 After getting result from task_register, the data format will be as below
        {{
            "task_id": "string",
            "status": "success"
        }}
        You MUST use the above data to call quick_preview tool.
    3. You MUST call quick_preview tool SECOND, before calling any other tools
    3.1 When calling quick_preview, you MUST use the exact format as below, don't include any other content,
        and make sure the input is a valid JSON object.
        {{
            "task_id": "string",
            "user_prompt": "string",
        }}
    3.2 After getting result from quick_preview, the data format will be as below:
        {{
            "task_id": "12345",
            "ticker": "string",
            "time_frame": "1d",
            "start_date": "YYYY-MM-DD",
            "end_date": "YYYY-MM-DD",
            "indicators": [{{
                "name": "RSI",
                "params": {{
                    "period": 14
                }}
            }}]
        }}
        You MUST use the above data to call yh_query_save tool.
    4. You MUST call yh_query_save tool THIRD, after calling quick_preview and before calling any other tools
    4.1 When calling yh_query_save, you MUST use the exact format as below, don't include any other content,
        and make sure the input is a valid JSON object.
        {{
            "task_id": "string",
            "ticker": "string",
            "time_frame": "1d",
            "start_date": "YYYY-MM-DD",
            "end_date": "YYYY-MM-DD"
        }}
    4.2 After getting result from yh_query_save, the data format will be as below:
        {{
            "task_id": "string",
            "status": "success",
            "storage_key": "TSLA:1d:2023-01-01:2023-10-01",
            "message": "string"
        }}
    5. You MUST call code_generator tool FOURTH, after calling yh_query_save and before calling any other tools
    5.1 When calling code_generator, you MUST use the exact format as below, don't include any other content,
        and make sure the input is a valid JSON object.
        {{
            "task_id": "string",
            "ticker": "string",
            "start_date": "YYYY-MM-DD",
            "end_date": "YYYY-MM-DD",
            "time_frame": "1d",
            "user_prompt": "string"
        }}
    5.2 After getting result from code_generator, the data format will be as below:
        {{
            "task_id": "string",
            "status": "success",
            "logic_summary": {{
              "entry_conditions": ["..."],
              "exit_conditions": ["..."]
            }}
        }}
    6. You MUST call code_executor tool LAST, after calling code_generator and before giving the final answer
    6.1 When calling code_executor, you MUST use the exact format as below,
        and make sure the input is a valid JSON object.
        {{
            "task_id": "string"
        }}
    6.2 After getting result from code_executor, the data format will be as below:
        {{
            "task_id": "string",
            "status": "success",
            "output": {{
                "kpis": {{
                    "total_return": 15.5,
                    "sharpe_ratio": 1.2,
                    "max_drawdown": 5.0,
                    "win_rate": 60.0,
                    "total_trades": 10
                }}
            }}
        }}
    7. You MUST analyze the output from code_executor tool, and give the final answer based on the analysis,
        give a score out of 100 to the strategy based on the kpis, and provide suggestions for improvement if any in one sentence.
    7.1 Your final answer MUST be in the below JSON format, JSON only, no text outside:
        {{
            "task_id": "12345",
            "analysis": "string",
            "strategy_score": "int",
            "suggestions": "string"
        }}

    **General Rules:**
    1.  **Strict Sequence:** You MUST call tools in the exact numbered order defined below. Do not skip steps, repeat steps, or change the order.
    2.  **State Management:** You MUST capture the specified outputs from a step to use as the inputs for the next step.
    3.  **Action:** The action you take, MUST be one of [{tool_names}]
    4.  **No Commentary:** Do not add any conversational text or explanations. Only output your thought process and the tool call.
    5.  **Tools:** You MUST include ALL required parameters when calling tools, if the tool you need to call is not available, skip it.
    6.  **Logging:** You should not print tool calling process twice.

    Question: the input question you must answer
    Thought: you should always think about what to do
    Action: the action to take, should be one of [{tool_names}]
    Action Input: the input to the action (if there is no required input, include "Action Input: None")
    Observation: wait for the human to respond with the result from the tool, do not assume the response

    ... (this Thought/Action/Action Input/Observation can repeat N times. If you do not need to use a tool, or after asking the human to use any tools and waiting for the human to respond, you might know the final answer.)
    Use the following format once you have the final answer:

    Thought: I now know the final answer
    Final Answer: the final answer to the original input question