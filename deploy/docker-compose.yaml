services:
  agent:
    build:
      context: ../apps
      dockerfile: agent/Dockerfile
    container_name: agentquant-agent
    restart: always
    ports:
      - 8000:8000
    networks:
      - agentquant-network
    environment:
      NAT_RELOAD_ENABLED: "false"
      MCP_SERVER_ENDPOINT: http://mcp-server:8080/mcp/sse
      LLM_GENERIC_MODEL_NAME: ${LLM_GENERIC_MODEL_NAME:-"qwen3-plus"}
      LLM_CODER_MODEL_NAME: ${LLM_CODER_MODEL_NAME:-"qwen3-coder-plus"}
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      REDIS_HOST: redis
      REDIS_PORT: "6379"
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://host.docker.internal:8000/docs"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      mcp-server:
        condition: service_healthy

  mcp-server:
    build: ../apps/mcp-server
    container_name: agentquant-mcp-server
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - agentquant-network
    environment:
      REDIS_URL: redis://redis:6379
      K8S_CONFIG_FILE: /kube/kubeconfig.yaml
      K8S_SERVER_ENDPOINT: https://host.docker.internal:6444
      JOB_RUNNER_IMAGE: docker.io/go2sheep/code-runner:python-3.12
      JOB_REDIS_HOST: host.docker.internal
      JOB_REDIS_PORT: "6379"
    volumes:
      - kubeconfig:/kube
    depends_on:
      kind:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://host.docker.internal:8080/health"]
      interval: 5s
      timeout: 5s
      retries: 5

  kind:
    build: ./kind
    container_name: agentquant-kind
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kind:/kind-config
      - kind_data:/kind
      - kubeconfig:/kube
    command: >
      sh -c "
        set -ex;
        if ! kind get clusters | grep -q 'my-cluster'; then
          echo 'Cluster my-cluster not found, creating it...';
          kind create cluster --name my-cluster --config /kind-config/kind-config.yaml;
        else
          echo 'Cluster my-cluster already exists.';
        fi;
        kind get kubeconfig --name my-cluster > /kube/kubeconfig.yaml;
        rm /kind-config/kubeconfig.yaml;
        cp /kube/kubeconfig.yaml /kind-config/kubeconfig.yaml;
        # Keep the container running
        tail -f /dev/null;
      "
    healthcheck:
      test:
        [
          "CMD",
          "kubectl",
          "version",
          "--kubeconfig=/kube/kubeconfig.yaml",
          "-s",
          "https://host.docker.internal:6444",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  mcp-inspector:
    image: ghcr.io/modelcontextprotocol/inspector:latest
    container_name: agentquant-mcp-inspector
    restart: unless-stopped
    ports:
      - "6274:6274"
      - "6277:6277"
    networks:
      - agentquant-network
    environment:
      DANGEROUSLY_OMIT_AUTH: "true"
      HOST: 0.0.0.0
    profiles:
      - development

  redis:
    image: redis:7-alpine
    container_name: agentquant-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - agentquant-network

  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: agentquant-redis-insight
    restart: unless-stopped
    environment:
      RI_REDIS_HOST: redis
      RI_REDIS_PORT: 6379
    ports:
      - "5540:5540"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - agentquant-network
    profiles:
      - development

volumes:
  redis_data:
    driver: local
  kind_data:
    driver: local
  kubeconfig:
    driver: local

networks:
  agentquant-network:
    driver: bridge
    name: agentquant-network
